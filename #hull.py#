from PIL import Image
import PIL.ImageShow
PIL.ImageShow._viewers = [PIL.ImageShow._viewers[0]]

import numpy as np
import cv2 as cv

from skimage.morphology import convex_hull_image
from skimage.measure import find_contours 

import os
from os.path import join

import matplotlib.pyplot as plt


""" Pick a random image and get its total mask """
img_ids = os.listdir('data')
img_ids = list(filter(lambda f: not f.endswith('zip'), img_ids))
img_ids = list(filter(
    lambda f: os.path.isdir(join('data', f, 'masks')), img_ids))

img_id = np.random.choice(img_ids)
dirname = join('data', img_id)
img_path = join(dirname, 'images', img_id+'.png')
mask_dir = join(dirname, 'masks')

masks = os.listdir(mask_dir)
total_mask = None
for mask in masks:
    mask_img = Image.open(join(mask_dir, mask))
    if total_mask is None:
        total_mask = np.zeros_like(np.array(mask_img))
    total_mask += np.array(mask_img)


""" Pick a random component of the total mask
and stamp it out from the mask """
output = cv.connectedComponentsWithStats(total_mask, cv.CV_32S)
num_label, labels = output[0], output[1]
label_num = np.random.randint(1, num_label)

for i in range(labels.shape[0]):
    for j in range(labels.shape[1]):
        if labels[i,j] == label_num:
            labels[i,j]= 1.0
        else:
            labels[i,j] = 0.0
total_mask = labels*255


""" Find the convex hull image of the cluster
as well as the boundaries of it and its corresponding hull """
hull = convex_hull_image(total_mask)
contour = find_contours(hull, 0.0)[0]
mask_contour = find_contours(total_mask, 0.0)[0]


""" Make a two-panel plot:
On the left, plot the cluster
on the right, plot the mask boundary overlayed on the convex hull """
_, axs = plt.subplots(1, 2)
axs[0].imshow(total_mask, cmap='gray')
axs[1].imshow(hull, cmap='gray')
axs[1].plot(mask_contour[:,1], mask_contour[:,0], lw=1.5)


""" If the area of the mask is less than 95% that of
the convex hull, we say that it is concave """
hull_area = np.sum(hull == 1)
mask_area = np.sum(total_mask == 255)
print mask_area, hull_area

if float(mask_area)/hull_area < 0.95:
    print 'Mask is probably concave'
else:
    print 'Mask is probably convex'


""" Find the points on the mask boundary that are off of
the boundary of the convex hull in order to cut the cluster """
diffs = []
dists = []

for hv, mv in zip(contour, mask_contour):
    xmatch = mv[0] <= hv[0]+1 and mv[0] >= hv[0]-1
    ymatch = mv[1] <= hv[1]+1 and mv[1] >= hv[1]-1
    if not (xmatch and ymatch):
        #"""
        shd_app = True
        for diff in diffs:
            xmatch = mv[0] <= diff[0]+1 and mv[0] >= diff[0]-1
            ymatch = mv[1] <= diff[1]+1 and mv[1] >= diff[1]-1
            if xmatch or ymatch:
                shd_app = False
        if shd_app:
            diffs.append((mv[0], mv[1]))
        #"""
        diffs.append((mv[0], mv[1]))
        dists.append(np.sqrt((mv[0]-hv[0])**2 + (mv[1]-hv[1])**2))

# Take the points on the mask contour that are farthest from the
# hull contour and remove difference points that are close to them
# on the mask contour.
# Repeat this so that the difference points are sparse
#idxs = np.argsort(np.array(dists))
#for i in idxs:

axs[0].scatter([d[1] for d in diffs], [d[0] for d in diffs], s=3.5, c='r')

if len(diffs) > 1:
    from closestpair import closestpair
    closest = closestpair(diffs)
    axs[0].scatter([closest[0][1], closest[1][1]], [closest[0][0], closest[1][0]], s=5.0, c='g')

plt.show()
