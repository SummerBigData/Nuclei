from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from util import *

from keras.layers import Lambda, Input, Dense
from keras.models import Model
from keras.datasets import mnist
from keras.losses import mse, binary_crossentropy
from keras.utils import plot_model
from keras import backend as K

import numpy as np
import matplotlib.pyplot as plt
import argparse
import os


# reparameterization trick
# instead of sampling from Q(z|X), sample eps = N(0,I)
# z = z_mean + sqrt(var)*eps
def sampling(args):
    """Reparameterization trick by sampling fr an isotropic unit Gaussian.
    # Arguments:
        args (tensor): mean and log of variance of Q(z|X)
    # Returns:
        z (tensor): sampled latent vector
    """

    z_mean, z_log_var = args
    batch = K.shape(z_mean)[0]
    dim = K.int_shape(z_mean)[1]
    # by default, random_normal has mean=0 and std=1.0
    epsilon = K.random_normal(shape=(batch, dim))
    return z_mean + K.exp(0.5 * z_log_var) * epsilon


def plot_results(models,
                 data,
                 batch_size=128,
                 model_name="vae_mnist",
                 ids=[]):
    """Plots labels and MNIST digits as function of 2-dim latent vector
    # Arguments:
        models (tuple): encoder and decoder models
        data (tuple): test data and label
        batch_size (int): prediction batch size
        model_name (string): which model is using this function
    """

    encoder, decoder = models
    x_test, y_test = data

    if not os.path.exists(model_name):
        os.mkdir(model_name)
    #os.makedirs(model_name, exist_ok=True)

    #'''
    #white_ids = open('white_img_ids.txt').readline().split(',') 
    colors = []
    #for id in ids:
        #if id in white_ids:
    for x in x_test:
        if x.mean() >= 0.5:
            colors.append('r')
        else:
            colors.append('g')
    #'''

    filename = os.path.join(model_name, "vae_mean.png")
    # display a 2D plot of the digit classes in the latent space
    z_mean, _, _ = encoder.predict(x_test,
                                   batch_size=batch_size)

    #print(len(ids), len(z_mean))
    #for i, (id, z) in enumerate(zip(ids, z_mean)):
    #    print(id, z, np.mean(x_test[i]))

    plt.figure(figsize=(12, 10))
    plt.scatter(z_mean[:, 0], z_mean[:, 1], c=colors)
    #plt.colorbar()
    plt.xlabel("z[0]")
    plt.ylabel("z[1]")
    plt.savefig(filename)
    plt.show()


# MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

image_size = x_train.shape[1]
#original_dim = image_size * image_size
original_dim = 128*128
#x_train = np.reshape(x_train, [-1, original_dim])
#x_test = np.reshape(x_test, [-1, original_dim])
#x_train = x_train.astype('float32') / 255
#x_test = x_test.astype('float32') / 255

# network parameters
input_shape = (original_dim, )
intermediate_dim = 512
batch_size = 128
latent_dim = 2
epochs = 50

# VAE model = encoder + decoder
# build encoder model
inputs = Input(shape=input_shape, name='encoder_input')
x = Dense(intermediate_dim, activation='relu')(inputs)
z_mean = Dense(latent_dim, name='z_mean')(x)
z_log_var = Dense(latent_dim, name='z_log_var')(x)

# use reparameterization trick to push the sampling out as input
# note that "output_shape" isn't necessary with the TensorFlow backend
z = Lambda(sampling, output_shape=(latent_dim,), name='z')([z_mean, z_log_var])

# instantiate encoder model
encoder = Model(inputs, [z_mean, z_log_var, z], name='encoder')
encoder.summary()
#plot_model(encoder, to_file='vae_mlp_encoder.png', show_shapes=True)

# build decoder model
latent_inputs = Input(shape=(latent_dim,), name='z_sampling')
x = Dense(intermediate_dim, activation='relu')(latent_inputs)
outputs = Dense(original_dim, activation='sigmoid')(x)

# instantiate decoder model
decoder = Model(latent_inputs, outputs, name='decoder')
decoder.summary()
#plot_model(decoder, to_file='vae_mlp_decoder.png', show_shapes=True)

# instantiate VAE model
outputs = decoder(encoder(inputs)[2])
vae = Model(inputs, outputs, name='vae_mlp')

from cv2 import cvtColor
from cv2 import COLOR_BGRA2GRAY as bgr2gray
def load_imgs(d):
    ids = os.listdir(d)
    imgs = [imread(join(d, id, 'images', id+'.png')) for id in ids]

    for i, x in enumerate(imgs):
        if len(x.shape) == 3:
            imgs[i] = cvtColor(x, bgr2gray)

    return imgs, ids

if __name__ == '__main__':
    #X, ids = all_imgs(ret_ids=True)
    #y = masks_for(ids)
    #X, y, ids = get_test_data(ret_ids=True)
    X, ids = load_imgs('test_data2')

    from scipy.misc import imresize
    X = arr([imresize(x, (128, 128))/255. for x in X])
    #y = arr([imresize(img, (128, 128)) for img in y])

    X = X.reshape(len(X), -1)
    #y = y.reshape(len(y), -1)
    #print(X.shape, y.shape)
    print(X.shape)

    #m = int(len(X)*.9)
    #x_train = X[:m]
    #y_train = y[:m]
    #x_test = X[m:]
    #y_test = y[m:] 

    parser = argparse.ArgumentParser()
    help_ = "Load h5 model trained weights"
    parser.add_argument("-w", "--weights", help=help_)
    help_ = "Use mse loss instead of binary cross entropy (default)"
    parser.add_argument("-m",
                        "--mse",
                        help=help_, action='store_true')
    args = parser.parse_args()
    models = (encoder, decoder)
    data = (x_test, y_test)

    # VAE loss = mse_loss or xent_loss + kl_loss
    reconstruction_loss = mse(inputs, outputs)
    reconstruction_loss *= original_dim
    kl_loss = 1 + z_log_var - K.square(z_mean) - K.exp(z_log_var)
    kl_loss = K.sum(kl_loss, axis=-1)
    kl_loss *= -0.5
    vae_loss = K.mean(reconstruction_loss + kl_loss)
    vae.add_loss(vae_loss)
    vae.compile(optimizer='adam')
    #plot_model(vae,
    #           to_file='vae_mlp.png',
    #           show_shapes=True)

    if args.weights:
        vae = vae.load_weights(args.weights)
    else:
        # train the autoencoder
        vae.fit(x_train,
                epochs=50,
                batch_size=batch_size,
                validation_data=(x_test, None))
        vae.save_weights('vae_mlp_mnist.h5')

    '''
    idx = np.random.randint(0, len(X))
    x = X[idx]
    plt.imshow(x.reshape(128, 128), 'gray')
    plt.show()

    encoder, decoder = models
    z = encoder.predict(np.expand_dims(x, axis=0), batch_size=1)[0]
    print(z)

    samp = decoder.predict(z)[0]
    plt.imshow(samp.reshape(128, 128), 'gray')
    plt.title('Decoded')
    plt.show() 
    '''
    
    plot_results(models,
                 (X, y),
                 batch_size=batch_size,
                 model_name="vae_mlp",
                 ids=ids[m:])
